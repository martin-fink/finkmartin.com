image: docker:git

services:
  - docker:dind

variables:
  REGISTRY: registry.baey.eu
  CONTAINER_IMAGE: $REGISTRY/martin/finkmartin.com
  DOCKER_SERVICE_NAME: finkmartin.com
  DOCKER_DRIVER: overlay2

stages:
  - build
  - package
  - deploy

build:
  stage: build
  image: node:13-alpine
  only:
    - tags
  script:
    - yarn install --frozen-lockfile
    - yarn build
    - yarn install --production --frozen-lockfile
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 hour

docker-build:
  stage: package
  only:
    - tags
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $REGISTRY
  script:
    - docker build -t ${CONTAINER_IMAGE}:$CI_COMMIT_REF_NAME -t ${CONTAINER_IMAGE}:latest .
    - docker push ${CONTAINER_IMAGE}:$CI_COMMIT_REF_NAME
    - docker push ${CONTAINER_IMAGE}:latest

deploy:
  stage: deploy
  only:
    - tags
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | ssh-add - > /dev/null

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    #- git config --global user.email "user@example.com"
    #- git config --global user.name "User name"
    ##
    ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
    ## following two lines.
    ##
    #- echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    #- chmod 644 ~/.ssh/known_hosts

    ##
    ## Alternatively, use ssh-keyscan to scan the keys of your private server.
    ## Replace example.com with your private server's domain name. Repeat that
    ## command if you have more than one server to connect to.
    ##
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    ##
    ## You can optionally disable host key checking. Be aware that by adding that
    ## you are susceptible to man-in-the-middle attacks.
    ## WARNING: Use this only with the Docker executor, if you use it with shell
    ## you will overwrite your user's SSH config.
    ##
    #- echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - SETUP="cd $DEPLOY_LOCATION"
    - LOGIN="docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $REGISTRY"
    - PULL="docker-compose -f docker-compose.yml pull --quiet $DOCKER_SERVICE_NAME"
    - BUILD="docker-compose -f docker-compose.yml up --build --detach $DOCKER_SERVICE_NAME"
    - ssh -p $SSH_PORT deploy@${SERVER_URL} "$SETUP && $LOGIN && $PULL && $BUILD"
